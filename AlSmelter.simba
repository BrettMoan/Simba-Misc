program AlSmelter_V002;
{$I SRL/OSR.simba}
{$I SRL/utils/rsclient.simba}
{$I SRL/utils/rsclient_overrides.simba}
{$I SRL/utils/itemfinder.simba}
{$I RSWalker/Walker.simba}
{$H-}{$X+}
{==============================================================================]
| AlKharid Smelter â„¢
|
| Steps to use:
|   1. For longer runs you need to declare login details bellow
|   2. Start the script wherever
[==============================================================================}
type
  TRSBar = (BronzeBar, IronBar, SilverBar, SteelBar, GoldBar, MithrilBar, AdamantBar, RuneBar);

var
  LOGIN_NAME = '';
  LOGIN_PASS = '';
  RS_WORLD   = -1;         // preferred world, -1 = random world
  IS_MEMBER  = FALSE;      // TRUE or FALSE
  BAR_TYPE   = IronBar;    //


type
  TStatistics = record
    Count: Int32;
    StartInfo: TSkillInfo;
    PrcToNextLvl, Rem, CurrLvl, CurrXP, Gains, XPPerBar: Double;
    DismissedRandoms: Int32;
  end;

  TSmelter = record
    StartTime: Int64;
    BotStats: TStatistics;
    StatsDebugTick: Int64;

    OreNames: array [0..1] of String;
    OreRatio: array [0..1] of Int8;
    BarName: String;
    MakeID: Int8;

    FurnaceSpot: TPoint;
    FurnaceColors: array of TCTS2Color;

    BankSpots: TPointArray;
    BankColors: array of TCTS2Color;

    BankPath: TPointArray;

    Antiban: TAntiban;

    __RndCalls: Int32;
  end;

var
  Bot: TSmelter;
  RSW: TRSWalker;

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// UTILITY FUNCTIONS

function GetTimeRunning(): UInt32; override;
begin
  if Bot.StartTime = 0 then Exit(0);
  Result := GetTickCount() - Bot.StartTime;
end;


// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// METHODS FOR FATIGUE

procedure WaitFatigue(t: Double; Exp: Double=0.2);
begin
  System.Wait(Trunc(2*t * (1-Power(System.Max(0.0001, Bot.Antiban.EnergyLevel()/100),Exp))));
end;

procedure Wait(min, max:Double; weight:EWaitDir=wdMean); override;
var t:Double;
begin
  t := PerformanceTimer();
  inherited(min, max, weight);
  WaitFatigue(PerformanceTimer()-t,0.2);
end;

procedure WaitEx(mean, dev:Double); override;
var t:Double;
begin
  t := PerformanceTimer();
  inherited(mean, dev);
  WaitFatigue(PerformanceTimer()-t, 0.2);
end;


// -----------------------------------------------------------------------------
// Break handling & antiban

procedure TSmelter.DoAntiban();
begin
  srl.DismissRandom();
  if Self.Antiban.DoAntiban() then
    Players.GetCurrent()^.Login();
end;

procedure TSmelter.PostAction(CheckAntiban: Boolean = True);
begin
  WaitEx(500,70);
  if CheckAntiban then Self.DoAntiban;
end;


// -----------------------------------------------------------------------------
// SMITHER

procedure TSmelter.DeclarePlayers();
begin
  with Players.New()^ do
  begin
    LoginName := LOGIN_NAME;
    Password  := LOGIN_PASS;
    IsActive  := True;
    IsMember  := IS_MEMBER;
    World     := RS_WORLD;
  end;
  Players.SetCurrent(0);
end;

function TSmelter.UseTwoOres(): Boolean;
begin
  Result := Self.OreRatio[1] <> 0;
end;

procedure TSmelter.ProcessWhileWaiting();
var
  n,atNextLvl,atCurrLvl:Int32;
begin
  BotStats.Gains := BotStats.Count * BotStats.XPPerBar;
  BotStats.CurrXP  := BotStats.StartInfo.XP + BotStats.Gains;
  BotStats.CurrLvl := srl.GetLevelAtXP(Ceil(BotStats.CurrXP));
  atNextLvl := srl.GetXPAtLevel(Trunc(BotStats.CurrLvl)+1);
  atCurrLvl := srl.GetXPAtLevel(Trunc(BotStats.CurrLvl));
  BotStats.Rem := atNextLvl - BotStats.CurrXP;
  BotStats.PrcToNextLvl := 100 - Round((BotStats.Rem / (atNextLvl - atCurrLvl)) * 100);

  if GetTickCount() - StatsDebugTick > 6000 then
  begin
    ClearDebug();
    WriteLn('+---| STATS |----------------------------------------');
    WriteLn('|- Bars Made           : ', BotStats.Count);
    WriteLn('|- Experience Gained   : ', Round(BotStats.Gains,2));
    WriteLn('|- Experience Per Hour : ', Round(BotStats.Gains / (GetTimeRunning()/1000/60/60)) );
    WriteLn('|- Smithing Level      : ', Round(BotStats.CurrLvl,2));
    WriteLn('|- Dismissed Randoms   : ', BotStats.DismissedRandoms);
    WriteLn('|- Time Since Break    : ', SRL.MsToTime(Antiban.TimeSinceBreak, Time_Short));
    WriteLn('|- Energy Level        : ', Round(Antiban.EnergyLevel,2));
    WriteLn('|- Script Runtime      : ', SRL.MsToTime(GetTimeRunning, Time_Short));
    WriteLn('+----------------------------------------------------');

    StatsDebugTick := GetTickCount();
  end;
  Self.DoAntiban;
end;


function TSmelter.FindObject(Locations: TPointArray; Colors: array of TCTS2Color; MinCount:Int32=100): TRectArray;
var
  i,j,count: Int32;
  me: TPoint;
  rect: TRectangle;
  TPA: TPointArray;
begin
  me := RSW.GetMyPos();
  for i:=0 to High(Locations) do
  begin
    rect := RSW.GetTileMSEx(me, Locations[i]).Expand(-2);
    if MainScreen.GetBounds.Contains(rect.Bounds) then
    begin
      count := 0;
      for j:=0 to High(Colors) do
      begin
        count += srl.FindColors(TPA, Colors[j], rect.Bounds);
        if count > MinCount then  //XXXXXXXXXXXX
        begin
          Result += rect;
          Break;
        end;
      end;
    end;
  end;

  if Length(Result) = 0 then
    TerminateScript('Not close enough to objects: ('+ ToStr(me.x) +','+ToStr(me.y)+') -> '+ ToStr(locations));
end;


function TSmelter.DoWork(): Boolean;
var
  i,next: Int32;
  T: TCountDown;
  Furnace: array of TRectangle;

  function ClickFurnace(rect: TRectangle): Boolean;
  begin
    mouse.Move(rect, Random(10) = 0);
    WaitEx(65,10);
    if not Mainscreen.IsUpText(['Smelt', 'Furnace']) then
      Exit();

    if (not ((Random()*100 <= 5) and ChooseOption.Select('Smelt Furnace'))) and
       (not Mouse.Click(ctRed)) then
    begin
      Wait(300,6000,wdLeft);
      Self.DoAntiban;
      WaitFatigue(Random(1000,4500), 0.6);
      Exit();
    end;

    WaitFatigue(Random(700,1200), 0.1);
    Minimap.WaitPlayerMoving(False,,200);

    if Chatbox.ClickButtonId('What would you', Self.MakeID, Self.BarName, 3000) then
      Result := True;
  end;

begin
  Furnace := Self.FindObject([self.FurnaceSpot], self.FurnaceColors);
  if Length(Furnace) = 0 then
    Exit(False);

  WaitFatigue(Random(700,1200), 0.1);
  if not ClickFurnace(Furnace[0]) then
    Exit;

  T.Init(srl.NormalRange(ONE_MINUTE*4, ONE_MINUTE*4+ONE_MINUTE));
  while (not T.IsFinished) do
  begin
    if (Inventory.Count(Self.OreNames[0]) < Self.OreRatio[0]) or
       (Self.UseTwoOres() and (Inventory.Count(Self.OreNames[1]) < Self.OreRatio[1])) then
      Break;

    if(Chatbox.GotLevelUp()) then
    begin
      if(Random(9) = 0) then
        Chatbox.HandleLevelUp();
      Break;
    end;

    Self.ProcessWhileWaiting();
    WaitEx(30,5);
  end;
  Result := True;
end;


procedure TSmelter.DoBanking();
  function OpenBank(): Boolean;
  var
    rect: TRectangle;
    me: TPoint;
  begin
    for 0 to 4 do
    begin
      me := RSW.GetMyPos();
      self.BankSpots.Sort(me);
      for rect in Self.FindObject(self.BankSpots, self.BankColors) do
        if BankScreen.OpenAt(srl.RandomPoint(rect.Expand(-6))) then
          Exit(True);
      Minimap.SetCompassAngle([0,90,180,270][Random(4)]+Random(-15,15));
      Wait(800,1300);
    end;
  end;

var
  WithdrawCount0, WithdrawCount1: Int32;

begin
  if(not RSW.WebWalk([4885, 3776])) then
    TerminateScript('Failed to walk to bank');
  Self.DoAntiban;

  if(not OpenBank()) then
    TerminateScript('Failed to open bank');
  WaitEx(450,70);

  if(not BankScreen.DepositAll) then
    TerminateScript('Failed to deposit items');
  WaitEx(450,70);

  repeat
    WithdrawCount0 += Self.OreRatio[0];
    WithdrawCount1 += Self.OreRatio[1];
  until WithdrawCount0 + WithdrawCount1 + Self.OreRatio[0] + Self.OreRatio[1] > 28;

  if(not BankScreen.Withdraw(Self.OreNames[0], WithdrawCount0, [Self.OreNames[0]])) then
    TerminateScript('Failed to withdraw items');
  WaitEx(450,70);

  if Self.UseTwoOres() then
    if(not BankScreen.Withdraw(Self.OreNames[1], WithdrawCount1, [Self.OreNames[1]])) then
      TerminateScript('Failed to withdraw items');
  WaitEx(450,70);

  if Random() <= 0.25 then
  begin
    BankScreen.Close();
    Self.DoAntiban;
  end;

  if (Inventory.Count(Self.OreNames[0]) < Self.OreRatio[0]) or
     (Self.UseTwoOres() and (Inventory.Count(Self.OreNames[1]) < Self.OreRatio[1])) then
    TerminateScript('Out of ores');

  if(not RSW.WebWalk([4913, 3709])) then
    TerminateScript('Failed to walk to furnace');
  Self.DoAntiban;
end;

procedure TSmelter.Run();
var
  tick: UInt64;
begin
  Self.StartTime := GetTickCount();
  Self.BotStats.StartInfo := Stats.GetSkillInfo(SKILL_SMITHING);
  Mainscreen.SetAngle(True);

  repeat
    if (Inventory.Count(Self.OreNames[0]) < Self.OreRatio[0]) or
       (Self.UseTwoOres() and (Inventory.Count(Self.OreNames[1]) < Self.OreRatio[1])) then
    begin
      Self.BotStats.Count += Length(Inventory.GetUsedSlots);
      Self.DoBanking();
    end;

    if Self.DoWork() then
      Self.DoAntiban;

    Wait(1);
  until False;
end;


procedure TSmelter.SetupAntiban();
begin
  Antiban.Init(SKILL_SMITHING);
  Antiban.AddTask([@Antiban.LoseFocus,      ONE_MINUTE*6]);
  Antiban.AddTask([@Antiban.HoverPlayers,   ONE_MINUTE*8]);
  Antiban.AddTask([@Antiban.CheckSkill,     ONE_MINUTE*11]);
  Antiban.AddTask([@Antiban.CheckStats,     ONE_MINUTE*13]);
  Antiban.AddTask([@Antiban.OpenRandomTab,  ONE_MINUTE*16]);
  Antiban.AddTask([@Antiban.VeryShortBreak, ONE_MINUTE*35]);
  Antiban.AddTask([@Antiban.RandomCompass,  ONE_MINUTE*35]);
  Antiban.AddTask([@Antiban.DoMiscStuff,    ONE_MINUTE*45]);

  Antiban.AddBreak([65 * ONE_MINUTE, 05 * ONE_MINUTE, 0.15]);
  Antiban.AddBreak([02 * ONE_HOUR,   10 * ONE_MINUTE, 0.75]);
  Antiban.AddBreak([04 * ONE_HOUR,   45 * ONE_MINUTE, 0.85]);
  Antiban.AddBreak([17 * ONE_HOUR,   07 * ONE_HOUR,   0.99]);
end;

procedure TSmelter.Init();
begin
  self.DeclarePlayers();
  Players.GetCurrent()^.Login();

  Self.FurnaceSpot   := [4902,3703];
  Self.FurnaceColors := [CTS2(2500136, 15),  CTS2(3026482, 15)];
  Self.BankSpots  := [[4882,3776],[4882,3772],[4882,3780],[4882,3784]];
  Self.BankColors := [CTS2(608352,15),CTS2(605521,15),CTS2(5462367,15),CTS2(3158069,15),CTS2(4870227,15)];

  Self.SetupAntiban();

  case BAR_TYPE of
    BronzeBar:
      begin
        Self.BotStats.XPPerBar := 12.5;
        Self.MakeID   := 1;
        Self.OreNames := ['Iron ore',''];
        Self.OreRatio := [1,0];
        Self.BarName  := 'Iron bar';
      end;
    IronBar:
      begin
        Self.BotStats.XPPerBar := 12.5;
        Self.MakeID   := 2;
        Self.OreNames := ['Iron ore',''];
        Self.OreRatio := [1,0];
        Self.BarName  := 'Iron bar';
      end;
    SilverBar:
      begin
        Self.BotStats.XPPerBar := 13.7;
        Self.MakeID   := 3;
        Self.OreNames := ['Silver ore',''];
        Self.OreRatio := [1,0];
        Self.BarName  := 'Silver bar';
      end;
    SteelBar:
      begin
        Self.BotStats.XPPerBar := 17.5;
        Self.MakeID   := 4;
        Self.OreNames := ['Iron ore','Coal'];
        Self.OreRatio := [1,2];
        Self.BarName  := 'Steel bar';
      end;
    GoldBar:
      begin
        Self.BotStats.XPPerBar := 22.5;
        Self.MakeID   := 5;
        Self.OreNames := ['Gold ore',''];
        Self.OreRatio := [1,0];
        Self.BarName  := 'Gold bar';
      end;
    MithrilBar:
      begin
        Self.BotStats.XPPerBar := 30.0;
        Self.MakeID   := 6;
        Self.OreNames := ['Mithril ore','Coal'];
        Self.OreRatio := [1,4];
        Self.BarName  := 'Mithril bar';
      end;
    AdamantBar:
      begin
        Self.BotStats.XPPerBar := 37.5;
        Self.MakeID   := 7;
        Self.OreNames := ['Adamantite ore','Coal'];
        Self.OreRatio := [1,6];
        Self.BarName  := 'Adamantite bar';
      end;
    RuneBar:
      begin
        Self.BotStats.XPPerBar := 75.0;
        Self.MakeID   := 8;
        Self.OreNames := ['Runite ore','Coal'];
        Self.OreRatio := [1,8];
        Self.BarName  := 'Runite bar';
      end;
  else
    TerminateScript('Invalid bar name');
  end;
end;


begin
  srl.SetupForClient('',[]);
  srl.Options := [soDebugAntiban];
  RSClient.SetFocus();
  Bot.Init();

  RSW.Init('world.png');
  RSW.skipClose := 30;
  AddOnTerminate(@RSW.Free);

  Bot.Run();
end.
