program SuperSimple_Miner;
{$DEFINE SMART}
{$I SRL/OSR.simba}
{$I RSWalker/Walker.simba}
{$H-}

type
  TMiner = record
    PlayerBox: TBox;
    OreLocation: TPointArray;
    BankPath: TPointArray;
    zOffset: Int32;
  end;


var
  miner: TMiner;
  RSW: TRSWalker;


function WorldToMSTile(me, MMLoc: TPoint; z: Double = 0): TRectangle;
var
  angle: Double;
begin
  MMLoc := Point(MM2MS.MMCX, MM2MS.MMCY) + (MMLoc - me);
  angle := minimap.GetCompassAngle(False);
  MMLoc := MMLoc.Rotate(angle, Point(MM2MS.MMCX, MM2MS.MMCY));
  Result:= Minimap.VecToMSRect(Vec3(MMLoc.x, MMLoc.y, z), angle);
end;


// -----------------------------------------------------------------------------
// Miner

function TMiner.ContainsOre(R: TRectangle): Boolean;
var
  TPA: TPointArray;
begin
  srl.FindColors(TPA, CTS2(2371664, 15), R.Bounds);
  Result := Length(TPA) > 50;
end;

function TMiner.FindOres(): TRectArray;
var
  i: Int32;
  me: TPoint;
  rect: TRectangle;
begin
  me := RSW.GetMyPos();
  for i:=0 to High(self.OreLocation) do
  begin
    rect := WorldToMSTile(me, self.OreLocation[i], -2).Expand(self.zOffset);
    if MainScreen.GetBounds.Contains(rect.Bounds) then
      Result += rect;
  end;
end;

procedure TMiner.Mine();
var
  i,j,next: Int32;
  TRA: TRectArray;
begin
  TRA := FindOres();
  for i:=0 to High(TRA) do
  begin
    if not ContainsOre(TRA[i]) then
      continue;

    mouse.Move(TRA[i].Mean, Round(TRA[i].Radius));
    if not Mainscreen.IsUpText(['Mine', 'Rocks']) then
      Continue;

    if not Mouse.Click(ctRed) then
      continue;

    smart.Image.DrawTPA(TRA[i].ToTPA.Connect, $00FF00);
    srl.NormalWait(300,600, wdLeft);

    next := (i + 1) mod Length(TRA);
    mouse.Move(TRA[next].Mean, Round(TRA[next].Radius));

    j := GetTimeRunning() + srl.NormalRange(3500,5000);
    while (GetTimeRunning() < j) and (srl.IsAnimating(PlayerBox, 500,700) or ContainsOre(TRA[i])) do
      Wait(10);

    break;
  end;
end;

procedure TMiner.DoBanking();
begin
  RSW.WalkPath(self.BankPath.Reversed);

  if BankScreen.Open(blVarrockEast) then
  begin
    BankScreen.DepositAll;
    RSW.WalkPath(self.BankPath);
  end;
end;

procedure TMiner.Init();
begin
  self.OreLocation := [[4950, 2976], [4954, 2972]];
  self.BankPath    := [[4822, 2769], [4838, 2737], [4887, 2737], [4928, 2755], [4951, 2792], [4972, 2827], [4973, 2867], [4977, 2899], [4979, 2928], [4966, 2949], [4954, 2976]];
  self.zOffset     := -2;

  self.PlayerBox := Minimap.VecToMsRect(Vec3(MM2MS.MMCX,MM2MS.MMCY,2)).Expand(7).Bounds;
  self.BankPath  := RSWUtils.BuildPath(self.BankPath, 10);
end;


begin
  smart.EnableDrawing := True;
  smart.Init;

  RSW.Init('world.png');
  RSW.skipClose := 25;
  RSW.walkStyle := wsSPS;
  Miner.Init();

  while True do
  begin
    if Inventory.IsFull then
    begin
      smart.Image.Clear();
      miner.DoBanking;
    end;

    smart.Image.Clear();
    smart.Image.DrawBox(miner.PlayerBox, False, $666666);
    miner.Mine();
  end;
end.
