program SuperSimple_DrynorFisher;
{$DEFINE SMART}
{$I SRL/OSR.simba}
{$I RSWalker/Walker.simba}
{$H-}

type
  TFishingstyle = (fsNetFishing, fsBaitFishing);

  TFisher = record
    PlayerBox: TBox;
    Spots: TPointArray;
    BankPath: TPointArray;
    Offset: Vector3;

    AreaPoly: TPointArray;

    Style: TFishingstyle;

    // randomness
    RndCalls: Int32;
    HoverSkill: Byte;
  end;


var
  bot: TFisher;
  RSW: TRSWalker;


function WorldToMSTile(Me, ObjLoc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
var
  angle: Double;
begin
  ObjLoc := Point(MM2MS.MMCX, MM2MS.MMCY) + (ObjLoc - Me);
  angle  := minimap.GetCompassAngle(False);
  ObjLoc := ObjLoc.Rotate(angle, Point(MM2MS.MMCX, MM2MS.MMCY));
  Result := Minimap.VecToMSRect(Vec3(ObjLoc.x - offx, ObjLoc.y - offy, Height), angle);
end;

procedure MouseOffClient(direction: Byte);
var
  i,W,H: Int32;
  pt: TPoint;
begin
  GetClientDimensions(W, H);
  pt := Mouse.GetPosition();
  if (pt.X < 0) or (pt.X > W) or (pt.Y < 0) or (pt.Y > H) then
    Exit();
  if (direction >= 4) then
    direction := Random(0,3);
  case direction of
    0: Mouse.Move(Box(-300, -300, W, 0)); // top
    1: Mouse.Move(Box(0, H, W, H+300));   // bottom
    2: Mouse.Move(Box(0-300, 0, 0, H));   // left
    3: Mouse.Move(Box(W, 0, W+300, H));   // right
  end;
end;


// -----------------------------------------------------------------------------
// Miner
procedure TFisher.DeclarePlayers();
begin
  with Players.New()^ do
  begin
    LoginName := '';
    Password  := '';
    IsActive  := True;
    IsMember  := False;
    World     := 384;
  end;
  Players.SetCurrent(0);
end;



procedure TFisher.AntiBan();
var
  a, CPH:Double;
begin
  Inc(rndCalls);
  CPH := Max(1, rndCalls / (GetTimeRunning() / (1000*60*60)));
  case Random(round(CPH) * 24) of
    0..72: //72 == 3 per hour
      begin
        stats.HoverSkill(self.HoverSkill, srl.NormalRange(4000,6000), Random(0,4) > 1);
        WriteLn('>>> Check stats: ', (GetTimeRunning() / (1000*60*60)));
      end;

    73..85: //12 == 1 per hour
      begin
        Stats.Open();
        WaitEx(5000,500);
        Inventory.Open();
      end;

    86..98: //12 == 1 per hour
      begin
        WriteLn('>>> Taking a mini-break');
        if Random(2)=0 then MouseOffClient([1,1,1,1,1,2,2,2,3][Random(0,8)]);
        WaitEx(65000,10000);

        if not(srl.isLoggedIn()) then
          Players.GetCurrent()^.Login();

        Stats.HoverSkill(self.HoverSkill, srl.NormalRange(4000,6000));
      end;

    100..105: //6 == every two hours
      begin
        WriteLn('>>> Doing stuffs');
        if Random(2) = 0 then
          Gametabs.Open(tabFriends);

        WaitEx(3000,500);
        if Random(0, 9) = 0 then
        begin
          if Random(2)=0 then MouseOffClient([1,1,1,1,1,2,2,2,3][Random(0,8)]);
          WaitEx(30000,2500);
        end;

        if Random(0, 9) > 3 then
        begin
          Stats.HoverSkill(self.HoverSkill, srl.NormalRange(4000,6000), Random(0,4) > 1);
          WaitEx(2000,500);
        end;
      end;

    110..113: //3 == every four hours
      begin
        a := srl.NormalRange(1000*60*30.0, 1000*60*7);
        WriteLn('>>> Taking a break for ', Round(a/1000/60), ' minutes');
        Logout.Open();            WaitEx(700,100);
        logout.ClickLogout();     WaitEx(700,100);
        MouseOffClient([1,1,1,1,1,2,2,2,3][Random(0,8)]);
        Wait(Max(0,Round(a)));

        if not(srl.isLoggedIn()) then
          Players.GetCurrent()^.Login();
      end;
  end;
end;

procedure TFisher.PostAction(DoAntiBan:Boolean=True);
begin
  WaitEx(600,70);
  if DoAntiBan then AntiBan;
end;

function TFisher.Contains(R: TRectangle): Boolean;
begin
  Result := srl.IsAnimating(R.Bounds, 10, 100);
  if Mainscreen.GetBounds.Contains( R.Bounds() ) then
  begin
    if Result then smart.Image.DrawTPA(R.ToTPA.Connect, $00FF00)
    else           smart.Image.DrawTPA(R.ToTPA.Connect, $0000FF);
  end;
end;

function TFisher.Find(Spots: TPointArray): TRectArray;
var
  i: Int32;
  me: TPoint;
  rect: TRectangle;
begin
  me := RSW.GetMyPos();
  for i:=0 to High(Spots) do
  begin
    rect := WorldToMSTile(me, Spots[i], Offset.z,Offset.x,Offset.y);
    if MainScreen.GetBounds.Contains(rect.Bounds) then
      Result += rect;
  end;
end;

function TFisher.Work(): Boolean;
var
  i,invSize: Int32;
  t: TCountDown;
  TRA: TRectArray;
  R: TRectangle;
  Option: string;
begin
  smart.Image.Clear();
  TRA := Find(self.Spots);
  for i:=0 to High(TRA) do
  begin
    if not Contains(TRA[i]) then
      continue;

    mouse.Move(TRA[i].Mean, Round(TRA[i].Radius));
    if not Mainscreen.IsUpText(['Fishing', 'spot']) then
      Continue;

    if (Style = fsNetFishing)  then Option := 'Net Fishing';
    if (Style = fsBaitFishing) then Option := 'Bait Fishing';
    if not ChooseOption.Select(Option) then
      Continue;

    PostAction;
    while minimap.isPlayerMoving(250) do Wait(60);
    PostAction;

    TRA := Find(self.Spots);
    smart.Image.Clear();

    t.Init(Trunc(srl.GaussRand(33000,900)));
    invSize := Length(Inventory.GetUsedSlots);
    while (not t.IsFinished) and Self.Contains(TRA[i]) and srl.IsAnimating(PlayerBox,40,400,3) do
    begin
      if invSize < Length(Inventory.GetUsedSlots) then
      begin
        invSize := Length(Inventory.GetUsedSlots);
        t.Restart();
      end;
      Chatbox.HandleLevelUp();
      AntiBan;

      smart.Image.DrawTPA(TRA[i].ToTPA.Connect, 0);
      TRA := Find(self.Spots);
      self.Contains(TRA[i]);
    end;
    Exit(True);
  end;
end;

procedure TFisher.DoBanking();
  procedure DoInventory();
  var
    slots: TIntArray;
  begin
    slots := Inventory.GetUsedSlots();
    slots.Del(0,Ord(self.Style)+2);
    while Length(slots) > 0 do
    begin
      Inventory.MouseSlot(slots[0]);
      ChooseOption.Select(['Deposit-All']);
      while Inventory.IsSlotUsed(slots[0]) do WaitEx(90,10);
      slots := Inventory.GetUsedSlots();
      slots.Del(0,2);
    end;
  end;
begin
  RSW.WalkPath(self.BankPath.Reversed);
  AntiBan;

  for 0 to 3 do
  begin
    if BankScreen.Open(blDrynor) then Break;
    WaitEx(1200,160);
  end;

  if BankScreen.IsOpen() then
  begin
    PostAction(False);
    DoInventory();
    RSW.WalkPath(self.BankPath);
    AntiBan;
  end else
  begin
    WriteLn('Terminating: Failed to open bank');
    Logout.ClickLogout();
    TerminateScript;
  end;
end;

procedure TFisher.Init();
begin
  self.Spots    := [[4138, 3504],[4142, 3508],[4142, 3512],[4146, 3516],[4146, 3520],[4150, 3520],[4150, 3524],[4150, 3528],[4154, 3532],[4154, 3532],[4154, 3536],[4154, 3540]];
  self.BankPath := [[4177, 3473], [4157, 3494], [4154, 3532]];
  self.Offset.x := -0.5;
  self.Offset.y := -0.5;
  self.Offset.z := -1;

  self.PlayerBox := Minimap.VecToMsRect(Vec3(MM2MS.MMCX,MM2MS.MMCY,2)).Expand(7).Bounds;
  self.BankPath  := RSWUtils.BuildPath(self.BankPath, 8);
  self.AreaPoly  := [[4152, 3506], [4164, 3527], [4168, 3551], [4149, 3553], [4131, 3504]];

  self.Style      := fsNetFishing;
  self.HoverSkill := SKILL_FISHING;

  self.DeclarePlayers();

  Players.GetCurrent()^.Login();
  mainscreen.SetAngle(True);
end;

procedure TFisher.DebugSpots();
var
  i: Int32;
  me: TPoint;
  R: TRectangle;
begin
  smart.Image.Clear();
  me := RSW.GetMyPos();
  for i:=0 to High(Self.Spots) do
  begin
    R := WorldToMSTile(me, self.Spots[i], Offset.z, Offset.y, Offset.x);
    if MainScreen.GetBounds.Contains(R.Bounds) then
      smart.Image.DrawTPA(R.ToTPA.Connect, $777777);
  end;
end;


var
  trips: Int32;
begin
  smart.EnableDrawing := True;
  srl.Setup([]);

  RSW.Init('world.png');
  RSW.skipClose := 25;
  RSW.walkStyle := wsSPS;
  AddOnTerminate(@RSW.Free);

  bot.Init();
  bot.DebugSpots();

  while SRL.isLoggedIn() do
  begin
    if Inventory.IsFull then
    begin
      smart.Image.Clear();
      bot.DoBanking;

      if not RSWUtils.InPoly(RSW.GetMyPos, bot.AreaPoly) then
      begin
        WriteLn('Terminating: Failed to walk to spot');
        Logout.ClickLogout();
        TerminateScript();
      end;
      Inc(trips);
    end;

    smart.Image.Clear();
    smart.Image.DrawBox(bot.PlayerBox, False, $666666);
    if bot.Work() then
    begin
      WriteLn('-----------------');
      WriteLn('Trips  : ', trips);
      WriteLn('Runtime: ', Round(GetTimeRunning/1000/60), ' minutes');
      bot.AntiBan;
    end;

    if 'bait left' in Chatbox.GetQuery() then
    begin
      WriteLn('Terminating: No more bait');
      Logout.ClickLogout();
      TerminateScript();
    end;
  end;
end.
